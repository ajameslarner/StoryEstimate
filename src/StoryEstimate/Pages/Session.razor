@page "/session/join/{SessionId}"
@using Microsoft.AspNetCore.SignalR.Client
@using StoryEstimate.Models;
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@if (_errorMessage is not null)
{
    <div class="container">
        <div class="row">
            <div style="text-align: center;">
                <h4 style="color: red;">@_errorMessage</h4>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div style="text-align: center;">
                @if (_session.Private)
                {
                    <h1 style="font-family: 'MaryAnn-ExtraBold', sans-serif;">@_session.Name (Private)</h1>
                }
                else
                {
                    <h1 style="font-family: 'MaryAnn-ExtraBold', sans-serif;">@_session.Name</h1>
                }
                <div style="display: flex; justify-content: center; align-items: center;">
                    <input type="text" style="text-align: center;font-family: 'MaryAnn-Light', sans-serif;" class="form-control" placeholder="Session URL" @bind="_sessionUrl" readonly />
                    <button style="margin:10px;" class="btn btn-primary" @onclick="CopyToClipboard">Copy</button> @_copyMessage
                </div>
            </div>
        </div>

        <div class="row">
            <div style="text-align: center;" class="col-md-6">
                <hr />
                <div class="form-group">
                    @if (!_hasJoined)
                    {
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <input type="text" class="form-control" placeholder="Your name" @bind="_name" />
                            <button style="margin:10px;" class="btn btn-primary" @onclick="Join">Join</button>
                        </div>
                    }
                    else
                    {
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <select class="form-control" @bind="_vote">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="5">5</option>
                                <option value="8">8</option>
                                <option value="13">13</option>
                            </select>
                            <button style="margin:10px;" class="btn btn-primary" @onclick="Vote">Vote</button>
                        </div>
                    }
                </div>
                <hr />
                <div style="text-align: left; height: 300px; overflow-y: auto; display: flex; flex-direction: column;">
                    <ul class="no-bullets hide-scrollbar" >
                        @foreach (string message in _messages)
                        {
                            <li>@message</li>
                        }
                        <div @ref="_bottom"></div>
                    </ul>
                </div>
            </div>
            <div style="text-align: center;" class="col-md-2">
                <hr />
                <div style="display: flex; justify-content: center; align-items: center;">
                    <button style="margin:10px;" class="btn btn-primary" disabled="@(!_hasJoined || !_votes.Any())" @onclick="Reveal">Reveal</button> <button class="btn btn-primary" disabled="@(!_hasJoined || !_votes.Any())" @onclick="ResetVotes">Reset</button>
                </div>
                <hr />
                <ul class="no-bullets">
                    @if (_revealVotes)
                    {
                        @foreach (var vote in _session.Votes)
                        {
                            <li>@vote.Value (@vote.Key)</li>
                        }
                    }
                </ul>
            </div>
            <div style="text-align: center;" class="col-md-4">
                <hr />
                <div style="display: flex; justify-content: center; align-items: center;">
                    <button style="margin:10px;" class="btn btn-primary" @onclick="Leave" disabled="@(!_hasJoined)">Leave</button>
                </div> 
                <hr />
                <ul class="no-bullets">
                    @foreach (Client client in _clients)
                    {
                        @if(client.HasVoted)
                        {
                            <li>@client.Name (Voted)</li>
                        }
                        else
                        {
                            <li>@client.Name</li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div>
                    @if (_hasJoined)
                    {
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <input type="text" class="form-control" @onkeyup="CheckForEnter" @bind="_message" placeholder="Say something..." /> <button style="margin:10px;" class="btn btn-primary" @ref="_button" @onclick="Send">Send</button>
                        </div>
                    }
                </div>
            </div>

            <div style="text-align: center;" class="col-md-2">
                @if (_revealVotes)
                {
                    <h4 style="color: rgb(236, 138, 0);">Ta-da!</h4>
                }
            </div>
            <div style="text-align: center;" class="col-md-4">
                @if (_allVotesReceived)
                {
                    <h4 style="color: rgb(236, 138, 0);">All votes are in!</h4>
                }
            </div>
        </div>
    </div>

    @if (_unauthorised)
    {
        <h4 style="color: red;">Client Unauthorised</h4>
    }
}

<script>
    function scrollToBottom(element) {
        element.scrollIntoView({ behavior: "smooth" });
    }
    function focusElement(element) {
        element.focus();
    }
</script>

@code {

    [Parameter]
    public string? SessionId { get; set; }

    // Collections
    private List<string> _messages => _session.Chat.ToList();
    private List<Client> _clients => _session.Clients.Values.ToList();
    private List<string> _votes => _session.Votes.Values.ToList();

    // Inputs
    private string _message;
    private string _copyMessage;
    private string _sessionUrl;
    private HubConnection? _connection;
    private string _name;
    private bool _hasJoined;
    private string _vote;

    // Fields
    private string _errorMessage;
    private bool _unauthorised;
    private Models.Session _session = new();
    private bool _hasVoted;
    private bool _allVotesReceived;
    private bool _revealVotes;

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(NavManager
                .ToAbsoluteUri("/session"))
                .WithAutomaticReconnect()
                .Build();

        _connection.On<string>("ServerError", (error) =>
        {
            _errorMessage = error;
            InvokeAsync(StateHasChanged);
        });

        _connection.On<Models.Session>("SessionUpdate", (session) =>
        {
            _session = session;
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        _connection.On<Models.Session>("SetSession", (session) =>
        {
            _session = session;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("VoteReceived", () =>
        {
            _hasVoted = true;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("AllVotesReceived", () =>
        {
            _allVotesReceived = true;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("Reveal", () =>
        {
            _revealVotes = true;
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        _connection.On("VotesReset", () =>
        {
            ResetVote();
            _allVotesReceived = false;
            _revealVotes = false;
            _hasVoted = false;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await _connection.StartAsync();
            _sessionUrl = NavManager.Uri;

        }
        catch (HttpRequestException)
        {
            _unauthorised = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_connection is null) return;

        await _connection.SendAsync("GetSession", SessionId);
        _sessionUrl = NavManager.Uri;

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Join()
    {
        if (_connection is null) return;

        if (string.IsNullOrWhiteSpace(_name)) return;

        if (_hasJoined)
        {
            await Leave();
        }

        await _connection.SendAsync("JoinSession", _name, SessionId);
        _hasJoined = true;
        _name = "";
    }

    public async Task Vote()
    {
        if (string.IsNullOrWhiteSpace(_vote)) return;

        if (_connection is null) return;

        await _connection.SendAsync("Vote", _vote, _session.Id);
        _hasVoted = true;
    }

    public async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_message)) return;

        if (_connection is null) return;

        await _connection.SendAsync("SendMessage", _message, _session.Id);
        _message = string.Empty;
    }

    public async Task ResetVotes()
    {
        if (_connection is null) return;

        await _connection.SendAsync("ResetVotes", _session.Id);
    }

    public async Task ResetVote()
    {
        if (_connection is null) return;

        await _connection.SendAsync("ResetVote", _session.Id);
    }

    public async Task Reveal()
    {
        if (_connection is null) return;

        await _connection.SendAsync("RevealVotes", _session.Id);
    }

    public async Task Leave()
    {
        if (_connection is null) return;

        await _connection.SendAsync("Leave", _session.Id);
        _hasJoined = false;
        _vote = string.Empty;
        _hasVoted = false;
        _allVotesReceived = false;
        _revealVotes = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_connection is not null && _session is not null && _hasJoined)
        {
            await Leave();
            await _connection.DisposeAsync();
        }
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _sessionUrl);
        _copyMessage = "Copied!";
    }

    private ElementReference _bottom;

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", _bottom);
    }

    private ElementReference _button;

    private async Task CheckForEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Send();
        }
    }
}