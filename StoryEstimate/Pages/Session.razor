@page "/session/join/{SessionId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<style>
    #input-field {
        width: 200px;
        height: 30px;
        background-color: #f8f9fa;
        border-width: 0.5;
        padding-left: 5px;
        font-size: 16px;
    }

    #input-field:focus {
        outline: none;
    }
    
    .no-bullets {
        list-style-type: none;
        padding-left: 0;
    }

    #centered-container {
        text-align: center;
    }

    .sticky-bottom {
        position: fixed;
        bottom: 0;
        width: 100%;
        padding: 20px;
        text-align: left;
    }
</style>

<div class="container">
    <div class="row">
        <div style="text-align: center;" class="col-md-6">
            <h2>Storypoint Estimator</h2>
            <hr />
            <div class="form-group">
                @if (!_hasJoined)
                {
                    <label>
                        <input id="input-field" placeholder="Your name" @bind="_name" />
                        <button @onclick="Join">Join</button>
                    </label>
                }
                else
                {
                    <label>
                        <select id="input-field" @bind="_vote" disabled="@(_hasVoted)">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="5">5</option>
                            <option value="8">8</option>
                            <option value="13">13</option>
                        </select>
                        <button @onclick="Vote" disabled="@(_hasVoted)">Vote</button>
                    </label>
                }
            </div>
            <hr />
            <ul class="no-bullets">
                @foreach (string message in _messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
        <div style="text-align: center;" class="col-md-2">
            <h2>Results</h2>
            <hr />
            <label>
                <button disabled="@(!_hasJoined)" @onclick="Reveal">Reveal</button> <button disabled="@(!_hasJoined)" @onclick="Reset">Reset</button>
            </label>
            <hr />
            <ul class="no-bullets">
                @foreach (string vote in _votes)
                {
                    <li>@vote</li>
                }
            </ul>
        </div>
        <div style="text-align: center;" class="col-md-4">
            <h2>Connected</h2>
            <hr />
            <button @onclick="Leave" disabled="@(!_hasJoined)">Leave</button>
            <hr />
            <ul class="no-bullets">
                @foreach (string client in _clients)
                {
                    <li>@client</li>
                }
            </ul>
        </div>
    </div>
</div>
<div style="text-align: center;">
    @if (_unauthorised)
    {
        <h4 style="color: red;">Client Unauthorised</h4>
    }
    @if (_allVotesReceived)
    {
        <h4 style="color: green;">All votes are in!</h4>
    }
</div>

@* <div class="sticky-bottom">
    @if (_hasJoined)
    {
        <label>
            <input id="input-field" @bind="_message" placeholder="Say something..." /> <button @onclick="Send">Send</button>
        </label>
    }
</div> *@

@code {

    [Parameter]
    public string? SessionId { get; set; }

    // Collections
    private List<string> _messages => _session.Chat.ToList();
    private List<string> _clients => _session.Clients.Values.Select(x => x.Name).ToList();
    private List<string> _votes => _session.Votes.Values.Select(x => x).ToList();

    // Inputs
    private string _message;
    private HubConnection? _connection;
    private string _name;
    private bool _hasJoined;
    private string _vote;

    // Fields
    private string _errorMessage;
    private bool _unauthorised;
    private Models.Session _session = new();
    private bool _hasVoted;
    private bool _allVotesReceived;

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(NavManager
                .ToAbsoluteUri("/session"))
                .WithAutomaticReconnect()
                .Build();

        _connection.On<string>("ServerError", (error) =>
        {
            _errorMessage = error;
            InvokeAsync(StateHasChanged);
        });

        _connection.On<Models.Session>("SessionUpdate", (session) =>
        {
            _session = session;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("VoteReceived", () =>
        {
            _hasVoted = true;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("AllVotesReceived", () =>
        {
            _allVotesReceived = true;
            InvokeAsync(StateHasChanged);
        });

        _connection.On("Reveal", () =>
        {
            //_allVotesReceived = true;
            InvokeAsync(StateHasChanged);
        });
        
        try
        {
            await _connection.StartAsync();
        }
        catch (HttpRequestException)
        {
            _unauthorised = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public async Task Join()
    {
        if (_connection is null) return;

        await _connection.SendAsync("JoinSession", _name, SessionId);
        _hasJoined = true;
    }

    public async Task Vote()
    {
        if (string.IsNullOrWhiteSpace(_vote)) return;

        if (_connection is null) return;

        await _connection.SendAsync("Vote", _vote, _session.Id);
        _hasVoted = true;
    }

    public async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_message)) return;

        if (_connection is null) return;

        await _connection.SendAsync("SendMessage", _message, _session.Id);
    }

    public async Task Reset()
    {
        if (_connection is null) return;

        await _connection.SendAsync("ResetVotes", _session.Id);
    }

    public async Task Reveal()
    {
        if (_connection is null) return;

        await _connection.SendAsync("RevealVotes", _session.Id);
    }

    public async Task Leave()
    {
        if (_connection is null) return;

        await _connection.SendAsync("Leave", _session.Id);
        _hasJoined = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_connection is not null && _session is not null)
        {
            await _connection.SendAsync("Leave", _session.Id);
            await _connection.DisposeAsync();
        }
    }
}