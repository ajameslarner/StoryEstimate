@using StoryEstimate.Context
@inject SessionContext sessions

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a style="font-family: 'MaryAnn-ExtraBold', sans-serif; color:rgb(60,60,60)" class="navbar-brand" href="">Story Estimate</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink style="font-family: 'MaryAnn-Bold', sans-serif;" class="nav-link" href="/session/create" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> Create Session
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink style="font-family: 'MaryAnn-Bold', sans-serif;" class="nav-link" href="/session/join" Match="NavLinkMatch.All">
                <span class="oi oi-account-login" aria-hidden="true"></span> Join Session
            </NavLink>
        </div>
        @foreach (var session in sessions.GetAll())
        {
            if (!session.Value.Private)
            {
                <div class="nav-item px-3">
                    <NavLink style="font-family: 'MaryAnn-Bold', sans-serif;" class="nav-link" href="@($"/session/join/{session.Value.Id}")" Match="NavLinkMatch.All">
                        <span class="oi oi-chevron-right" aria-hidden="true"></span> @session.Value.Name
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        sessions.OnChanged += () =>
        {
            InvokeAsync(StateHasChanged);
        };
    }

    public void Dispose()
    {
        sessions.OnChanged -= () =>
        {
            InvokeAsync(StateHasChanged);
        };
    }
}
